{"ast":null,"code":"const dividirCircunferencia=(r,x,y)=>{let puntos=[];const radio=r;// Radio de la circunferencia\nconst centroX=x;// Coordenada x del centro de la circunferencia\nconst centroY=y;// Coordenada y del centro de la circunferencia\nfor(let i=0;i<12;i++){const angulo=Math.PI/6*i;// Ángulo en radianes (360° / 12 puntos = 30°)\n// Calcular las coordenadas (x, y) del punto utilizando seno y coseno\nconst x=centroX+radio*Math.cos(angulo);const y=centroY+radio*Math.sin(angulo);puntos.push({x,y});}puntos=rotarPuntos(puntos);return puntos;};function rotarPuntos(puntos){let puntosNuevo=[];puntosNuevo[0]=puntos[10];puntosNuevo[1]=puntos[11];puntosNuevo[2]=puntos[0];puntosNuevo[3]=puntos[1];puntosNuevo[4]=puntos[2];puntosNuevo[5]=puntos[3];puntosNuevo[6]=puntos[4];puntosNuevo[7]=puntos[5];puntosNuevo[8]=puntos[6];puntosNuevo[9]=puntos[7];puntosNuevo[10]=puntos[8];puntosNuevo[11]=puntos[9];return puntosNuevo;}export default dividirCircunferencia;","map":{"version":3,"names":["dividirCircunferencia","r","x","y","puntos","radio","centroX","centroY","i","angulo","Math","PI","cos","sin","push","rotarPuntos","puntosNuevo"],"sources":["/home/javierfili/Desktop/ProyectorPersonales/frontend/paraPortafolio/relojdigital/src/pages/analogico/DividirEnDoce.tsx"],"sourcesContent":["interface Punto {\n  x: number;\n  y: number;\n}\nconst dividirCircunferencia = (r: number, x: number, y: number): Punto[] => {\n  let puntos: Punto[] = [];\n  const radio = r; // Radio de la circunferencia\n  const centroX = x; // Coordenada x del centro de la circunferencia\n  const centroY = y; // Coordenada y del centro de la circunferencia\n  for (let i = 0; i < 12; i++) {\n    const angulo = (Math.PI / 6) * i; // Ángulo en radianes (360° / 12 puntos = 30°)\n\n    // Calcular las coordenadas (x, y) del punto utilizando seno y coseno\n    const x = centroX + radio * Math.cos(angulo);\n    const y = centroY + radio * Math.sin(angulo);\n\n    puntos.push({ x, y });\n  }\n  puntos = rotarPuntos(puntos);\n  return puntos;\n};\n\nfunction rotarPuntos(puntos: Punto[]) {\n  let puntosNuevo: Punto[] = [];\n  puntosNuevo[0] = puntos[10];\n  puntosNuevo[1] = puntos[11];\n  puntosNuevo[2] = puntos[0];\n  puntosNuevo[3] = puntos[1];\n  puntosNuevo[4] = puntos[2];\n  puntosNuevo[5] = puntos[3];\n  puntosNuevo[6] = puntos[4];\n  puntosNuevo[7] = puntos[5];\n  puntosNuevo[8] = puntos[6];\n  puntosNuevo[9] = puntos[7];\n  puntosNuevo[10] = puntos[8];\n  puntosNuevo[11] = puntos[9];\n  return puntosNuevo;\n}\n\nexport default dividirCircunferencia;\n"],"mappings":"AAIA,KAAM,CAAAA,qBAAqB,CAAGA,CAACC,CAAS,CAAEC,CAAS,CAAEC,CAAS,GAAc,CAC1E,GAAI,CAAAC,MAAe,CAAG,EAAE,CACxB,KAAM,CAAAC,KAAK,CAAGJ,CAAC,CAAE;AACjB,KAAM,CAAAK,OAAO,CAAGJ,CAAC,CAAE;AACnB,KAAM,CAAAK,OAAO,CAAGJ,CAAC,CAAE;AACnB,IAAK,GAAI,CAAAK,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAG,EAAE,CAAEA,CAAC,EAAE,CAAE,CAC3B,KAAM,CAAAC,MAAM,CAAIC,IAAI,CAACC,EAAE,CAAG,CAAC,CAAIH,CAAC,CAAE;AAElC;AACA,KAAM,CAAAN,CAAC,CAAGI,OAAO,CAAGD,KAAK,CAAGK,IAAI,CAACE,GAAG,CAACH,MAAM,CAAC,CAC5C,KAAM,CAAAN,CAAC,CAAGI,OAAO,CAAGF,KAAK,CAAGK,IAAI,CAACG,GAAG,CAACJ,MAAM,CAAC,CAE5CL,MAAM,CAACU,IAAI,CAAC,CAAEZ,CAAC,CAAEC,CAAE,CAAC,CAAC,CACvB,CACAC,MAAM,CAAGW,WAAW,CAACX,MAAM,CAAC,CAC5B,MAAO,CAAAA,MAAM,CACf,CAAC,CAED,QAAS,CAAAW,WAAWA,CAACX,MAAe,CAAE,CACpC,GAAI,CAAAY,WAAoB,CAAG,EAAE,CAC7BA,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,EAAE,CAAC,CAC3BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,EAAE,CAAC,CAC3BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,CAAC,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC1BY,WAAW,CAAC,EAAE,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC3BY,WAAW,CAAC,EAAE,CAAC,CAAGZ,MAAM,CAAC,CAAC,CAAC,CAC3B,MAAO,CAAAY,WAAW,CACpB,CAEA,cAAe,CAAAhB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}